// Excel関数のモジュール化されたインデックス

import type { CustomFormula } from './types';

// 各カテゴリから関数をインポート
import { DATEDIF, NETWORKDAYS, TODAY, NOW, DATE, YEAR, MONTH, DAY, WEEKDAY, DAYS, EDATE, EOMONTH, TIME, HOUR, MINUTE, SECOND, WEEKNUM, DAYS360, YEARFRAC } from './dateFunctions';
import { 
  SUMIF, COUNTIF, AVERAGEIF, SUM, AVERAGE, COUNT, MAX, MIN, ROUND,
  ABS, SQRT, POWER, MOD, INT, TRUNC, RAND, RANDBETWEEN, PI, DEGREES, RADIANS,
  SIN, COS, TAN, LOG, LOG10, LN, EXP, ASIN, ACOS, ATAN, ATAN2, ROUNDUP, ROUNDDOWN,
  CEILING, FLOOR, SIGN, FACT, SUMIFS, COUNTIFS, AVERAGEIFS, PRODUCT, MROUND,
  COMBIN, PERMUT, GCD, LCM, QUOTIENT, SINH, COSH, TANH,
  SUMSQ, SUMPRODUCT, EVEN, ODD, ARABIC, ROMAN, COMBINA, FACTDOUBLE, SQRTPI,
  SUMX2MY2, SUMX2PY2, SUMXMY2, MULTINOMIAL, PERMUTATIONA, BASE, DECIMAL, SUBTOTAL,
  AGGREGATE, CEILING_MATH, CEILING_PRECISE, FLOOR_MATH, FLOOR_PRECISE, ISO_CEILING, SERIESSUM,
  RANDARRAY, SEQUENCE, ASINH, ACOSH, ATANH, CSC, SEC, COT, ACOT, CSCH, SECH, COTH, ACOTH
} from './mathFunctions';
import { VLOOKUP, HLOOKUP, INDEX, MATCH, LOOKUP, XLOOKUP } from './lookupFunctions';
import { IF, AND, OR, NOT, IFS, XOR, TRUE, FALSE, IFERROR, IFNA } from './logicFunctions';
import { 
  CONCATENATE, CONCAT, LEFT, RIGHT, MID, LEN, UPPER, LOWER, TRIM, SUBSTITUTE, FIND, SEARCH, TEXTJOIN, SPLIT,
  PROPER, VALUE, TEXT, REPT, REPLACE, CHAR, CODE, EXACT, CLEAN, T, FIXED, NUMBERVALUE, DOLLAR, UNICHAR, UNICODE,
  LENB, FINDB, SEARCHB, REPLACEB, TEXTBEFORE, TEXTAFTER, TEXTSPLIT, ASC, JIS, DBCS, PHONETIC, BAHTTEXT
} from './textFunctions';
import { 
  MEDIAN, MODE, COUNTA, COUNTBLANK, STDEV, VAR, LARGE, SMALL, RANK,
  CORREL, QUARTILE, PERCENTILE, GEOMEAN, HARMEAN, TRIMMEAN,
  MAXIFS, MINIFS, STDEV_S, STDEV_P, STDEVA, STDEVPA, VAR_S, VAR_P, VARA, VARPA,
  AVEDEV, DEVSQ, KURT, SKEW, SLOPE, INTERCEPT, RSQ, PEARSON, STEYX, FISHER, FISHERINV,
  MODE_SNGL, MODE_MULT, RANK_EQ, RANK_AVG, PERCENTILE_INC, PERCENTILE_EXC, QUARTILE_INC,
  QUARTILE_EXC, STANDARDIZE, COVARIANCE_P, COVARIANCE_S, SKEW_P, PROB, PERCENTRANK,
  PERCENTRANK_INC, PERCENTRANK_EXC, PHI, GAUSS
} from './statisticsFunctions';
import {
  ISBLANK, ISERROR, ISNA, ISTEXT, ISNUMBER, ISLOGICAL, ISEVEN, ISODD, TYPE, N
} from './informationFunctions';
import { PMT, PV, FV, NPV, IRR, PPMT, IPMT } from './financialFunctions';
import { MDETERM, MINVERSE, MMULT, MUNIT } from './matrixFunctions';
import {
  NORM_DIST, NORM_INV, NORM_S_DIST, NORM_S_INV, LOGNORM_DIST, LOGNORM_INV,
  T_DIST, T_DIST_2T, T_DIST_RT, T_INV, T_INV_2T, CHISQ_DIST, CHISQ_DIST_RT,
  CHISQ_INV, CHISQ_INV_RT, F_DIST, F_DIST_RT, F_INV, F_INV_RT, BETA_DIST,
  BETA_INV, GAMMA_DIST, GAMMA_INV, EXPON_DIST, WEIBULL_DIST, BINOM_DIST,
  BINOM_INV, NEGBINOM_DIST, POISSON_DIST, HYPGEOM_DIST, CONFIDENCE_NORM,
  CONFIDENCE_T, Z_TEST, T_TEST, F_TEST, CHISQ_TEST, FORECAST, FORECAST_LINEAR,
  FORECAST_ETS, FORECAST_ETS_CONFINT, FORECAST_ETS_SEASONALITY, FORECAST_ETS_STAT,
  TREND, GROWTH, LINEST, LOGEST
} from './distributionFunctions';

// すべての関数を配列にまとめる
export const ALL_FUNCTIONS = [
  // 日付関数
  DATEDIF,
  NETWORKDAYS,
  TODAY,
  NOW,
  DATE,
  YEAR,
  MONTH,
  DAY,
  WEEKDAY,
  DAYS,
  EDATE,
  EOMONTH,
  TIME,
  HOUR,
  MINUTE,
  SECOND,
  WEEKNUM,
  DAYS360,
  YEARFRAC,
  
  // 数学関数
  SUMIF,
  COUNTIF,
  AVERAGEIF,
  SUM,
  AVERAGE,
  COUNT,
  MAX,
  MIN,
  ROUND,
  ABS,
  SQRT,
  POWER,
  MOD,
  INT,
  TRUNC,
  RAND,
  RANDBETWEEN,
  PI,
  DEGREES,
  RADIANS,
  SIN,
  COS,
  TAN,
  LOG,
  LOG10,
  LN,
  EXP,
  ASIN,
  ACOS,
  ATAN,
  ATAN2,
  ROUNDUP,
  ROUNDDOWN,
  CEILING,
  FLOOR,
  SIGN,
  FACT,
  SUMIFS,
  COUNTIFS,
  AVERAGEIFS,
  PRODUCT,
  MROUND,
  COMBIN,
  PERMUT,
  GCD,
  LCM,
  QUOTIENT,
  SINH,
  COSH,
  TANH,
  SUMSQ,
  SUMPRODUCT,
  EVEN,
  ODD,
  ARABIC,
  ROMAN,
  COMBINA,
  FACTDOUBLE,
  SQRTPI,
  SUMX2MY2,
  SUMX2PY2,
  SUMXMY2,
  MULTINOMIAL,
  PERMUTATIONA,
  BASE,
  DECIMAL,
  SUBTOTAL,
  AGGREGATE,
  CEILING_MATH,
  CEILING_PRECISE,
  FLOOR_MATH,
  FLOOR_PRECISE,
  ISO_CEILING,
  SERIESSUM,
  RANDARRAY,
  SEQUENCE,
  ASINH,
  ACOSH,
  ATANH,
  CSC,
  SEC,
  COT,
  ACOT,
  CSCH,
  SECH,
  COTH,
  ACOTH,
  
  // 統計関数
  MEDIAN,
  MODE,
  COUNTA,
  COUNTBLANK,
  STDEV,
  VAR,
  LARGE,
  SMALL,
  RANK,
  CORREL,
  QUARTILE,
  PERCENTILE,
  GEOMEAN,
  HARMEAN,
  TRIMMEAN,
  MAXIFS,
  MINIFS,
  STDEV_S,
  STDEV_P,
  STDEVA,
  STDEVPA,
  VAR_S,
  VAR_P,
  VARA,
  VARPA,
  AVEDEV,
  DEVSQ,
  KURT,
  SKEW,
  SLOPE,
  INTERCEPT,
  RSQ,
  PEARSON,
  STEYX,
  FISHER,
  FISHERINV,
  MODE_SNGL,
  MODE_MULT,
  RANK_EQ,
  RANK_AVG,
  PERCENTILE_INC,
  PERCENTILE_EXC,
  QUARTILE_INC,
  QUARTILE_EXC,
  STANDARDIZE,
  COVARIANCE_P,
  COVARIANCE_S,
  SKEW_P,
  PROB,
  PERCENTRANK,
  PERCENTRANK_INC,
  PERCENTRANK_EXC,
  PHI,
  GAUSS,
  
  // 検索関数
  VLOOKUP,
  HLOOKUP,
  INDEX,
  MATCH,
  LOOKUP,
  XLOOKUP,
  
  // 論理関数
  IF,
  AND,
  OR,
  NOT,
  IFS,
  XOR,
  TRUE,
  FALSE,
  IFERROR,
  IFNA,
  
  // テキスト関数
  CONCATENATE,
  CONCAT,
  LEFT,
  RIGHT,
  MID,
  LEN,
  UPPER,
  LOWER,
  TRIM,
  SUBSTITUTE,
  FIND,
  SEARCH,
  TEXTJOIN,
  SPLIT,
  PROPER,
  VALUE,
  TEXT,
  REPT,
  REPLACE,
  CHAR,
  CODE,
  EXACT,
  CLEAN,
  T,
  FIXED,
  NUMBERVALUE,
  DOLLAR,
  UNICHAR,
  UNICODE,
  LENB,
  FINDB,
  SEARCHB,
  REPLACEB,
  TEXTBEFORE,
  TEXTAFTER,
  TEXTSPLIT,
  ASC,
  JIS,
  DBCS,
  PHONETIC,
  BAHTTEXT,
  
  // 情報関数
  ISBLANK,
  ISERROR,
  ISNA,
  ISTEXT,
  ISNUMBER,
  ISLOGICAL,
  ISEVEN,
  ISODD,
  TYPE,
  N,
  
  // 財務関数
  PMT,
  PV,
  FV,
  NPV,
  IRR,
  PPMT,
  IPMT,
  
  // 行列関数
  MDETERM,
  MINVERSE,
  MMULT,
  MUNIT,
  
  // 分布関数
  NORM_DIST,
  NORM_INV,
  NORM_S_DIST,
  NORM_S_INV,
  LOGNORM_DIST,
  LOGNORM_INV,
  T_DIST,
  T_DIST_2T,
  T_DIST_RT,
  T_INV,
  T_INV_2T,
  CHISQ_DIST,
  CHISQ_DIST_RT,
  CHISQ_INV,
  CHISQ_INV_RT,
  F_DIST,
  F_DIST_RT,
  F_INV,
  F_INV_RT,
  BETA_DIST,
  BETA_INV,
  GAMMA_DIST,
  GAMMA_INV,
  EXPON_DIST,
  WEIBULL_DIST,
  BINOM_DIST,
  BINOM_INV,
  NEGBINOM_DIST,
  POISSON_DIST,
  HYPGEOM_DIST,
  
  // 検定・推定関数
  CONFIDENCE_NORM,
  CONFIDENCE_T,
  Z_TEST,
  T_TEST,
  F_TEST,
  CHISQ_TEST,
  
  // 予測・回帰関数
  FORECAST,
  FORECAST_LINEAR,
  FORECAST_ETS,
  FORECAST_ETS_CONFINT,
  FORECAST_ETS_SEASONALITY,
  FORECAST_ETS_STAT,
  TREND,
  GROWTH,
  LINEST,
  LOGEST
] as CustomFormula[];

// カテゴリ別の関数分類
export const FUNCTION_CATEGORIES = {
  date: [DATEDIF, NETWORKDAYS, TODAY, NOW, DATE, YEAR, MONTH, DAY, WEEKDAY, DAYS, EDATE, EOMONTH, TIME, HOUR, MINUTE, SECOND, WEEKNUM, DAYS360, YEARFRAC] as CustomFormula[],
  math: [SUMIF, COUNTIF, AVERAGEIF, SUM, AVERAGE, COUNT, MAX, MIN, ROUND, ABS, SQRT, POWER, MOD, INT, TRUNC, RAND, RANDBETWEEN, PI, DEGREES, RADIANS, SIN, COS, TAN, LOG, LOG10, LN, EXP, ASIN, ACOS, ATAN, ATAN2, ROUNDUP, ROUNDDOWN, CEILING, FLOOR, SIGN, FACT, SUMIFS, COUNTIFS, AVERAGEIFS, PRODUCT, MROUND, COMBIN, PERMUT, GCD, LCM, QUOTIENT, SINH, COSH, TANH, SUMSQ, SUMPRODUCT, EVEN, ODD, ARABIC, ROMAN, COMBINA, FACTDOUBLE, SQRTPI, SUMX2MY2, SUMX2PY2, SUMXMY2, MULTINOMIAL, PERMUTATIONA, BASE, DECIMAL, SUBTOTAL, AGGREGATE, CEILING_MATH, CEILING_PRECISE, FLOOR_MATH, FLOOR_PRECISE, ISO_CEILING, SERIESSUM, RANDARRAY, SEQUENCE, ASINH, ACOSH, ATANH, CSC, SEC, COT, ACOT, CSCH, SECH, COTH, ACOTH] as CustomFormula[],
  statistics: [MEDIAN, MODE, COUNTA, COUNTBLANK, STDEV, VAR, LARGE, SMALL, RANK, CORREL, QUARTILE, PERCENTILE, GEOMEAN, HARMEAN, TRIMMEAN, MAXIFS, MINIFS, STDEV_S, STDEV_P, STDEVA, STDEVPA, VAR_S, VAR_P, VARA, VARPA, AVEDEV, DEVSQ, KURT, SKEW, SLOPE, INTERCEPT, RSQ, PEARSON, STEYX, FISHER, FISHERINV, MODE_SNGL, MODE_MULT, RANK_EQ, RANK_AVG, PERCENTILE_INC, PERCENTILE_EXC, QUARTILE_INC, QUARTILE_EXC, STANDARDIZE, COVARIANCE_P, COVARIANCE_S, SKEW_P, PROB, PERCENTRANK, PERCENTRANK_INC, PERCENTRANK_EXC, PHI, GAUSS] as CustomFormula[],
  lookup: [VLOOKUP, HLOOKUP, INDEX, MATCH, LOOKUP, XLOOKUP] as CustomFormula[],
  logic: [IF, AND, OR, NOT, IFS, XOR, TRUE, FALSE, IFERROR, IFNA] as CustomFormula[],
  text: [CONCATENATE, CONCAT, LEFT, RIGHT, MID, LEN, UPPER, LOWER, TRIM, SUBSTITUTE, FIND, SEARCH, TEXTJOIN, SPLIT, PROPER, VALUE, TEXT, REPT, REPLACE, CHAR, CODE, EXACT, CLEAN, T, FIXED, NUMBERVALUE, DOLLAR, UNICHAR, UNICODE, LENB, FINDB, SEARCHB, REPLACEB, TEXTBEFORE, TEXTAFTER, TEXTSPLIT, ASC, JIS, DBCS, PHONETIC, BAHTTEXT] as CustomFormula[],
  information: [ISBLANK, ISERROR, ISNA, ISTEXT, ISNUMBER, ISLOGICAL, ISEVEN, ISODD, TYPE, N] as CustomFormula[],
  financial: [PMT, PV, FV, NPV, IRR, PPMT, IPMT] as CustomFormula[],
  matrix: [MDETERM, MINVERSE, MMULT, MUNIT] as CustomFormula[],
  distribution: [NORM_DIST, NORM_INV, NORM_S_DIST, NORM_S_INV, LOGNORM_DIST, LOGNORM_INV, T_DIST, T_DIST_2T, T_DIST_RT, T_INV, T_INV_2T, CHISQ_DIST, CHISQ_DIST_RT, CHISQ_INV, CHISQ_INV_RT, F_DIST, F_DIST_RT, F_INV, F_INV_RT, BETA_DIST, BETA_INV, GAMMA_DIST, GAMMA_INV, EXPON_DIST, WEIBULL_DIST, BINOM_DIST, BINOM_INV, NEGBINOM_DIST, POISSON_DIST, HYPGEOM_DIST] as CustomFormula[],
  testing: [CONFIDENCE_NORM, CONFIDENCE_T, Z_TEST, T_TEST, F_TEST, CHISQ_TEST] as CustomFormula[],
  forecasting: [FORECAST, FORECAST_LINEAR, FORECAST_ETS, FORECAST_ETS_CONFINT, FORECAST_ETS_SEASONALITY, FORECAST_ETS_STAT, TREND, GROWTH, LINEST, LOGEST] as CustomFormula[]
};

// HyperFormulaでサポートされていない関数（手動計算が必要）
export const UNSUPPORTED_FUNCTIONS = ALL_FUNCTIONS.filter(f => f.isSupported === false);

// HyperFormulaでサポートされている関数
export const SUPPORTED_FUNCTIONS = ALL_FUNCTIONS.filter(f => f.isSupported !== false);

// 関数名で検索
export const findFunction = (name: string): CustomFormula | undefined => {
  return ALL_FUNCTIONS.find(f => f.name.toUpperCase() === name.toUpperCase());
};

// 関数のパターンマッチング
export const matchFormula = (formula: string): { function: CustomFormula; matches: RegExpMatchArray } | null => {
  for (const func of ALL_FUNCTIONS) {
    const matches = formula.match(func.pattern);
    if (matches) {
      return { function: func, matches };
    }
  }
  return null;
};

// 関数タイプの判定（色分けのため）
export const getFunctionType = (functionName: string): string => {
  const name = functionName.toUpperCase();
  
  if (FUNCTION_CATEGORIES.date.some(f => f.name === name)) return 'date';
  if (FUNCTION_CATEGORIES.math.some(f => f.name === name)) return 'math';
  if (FUNCTION_CATEGORIES.statistics.some(f => f.name === name)) return 'statistics';
  if (FUNCTION_CATEGORIES.lookup.some(f => f.name === name)) return 'lookup';
  if (FUNCTION_CATEGORIES.logic.some(f => f.name === name)) return 'logic';
  if (FUNCTION_CATEGORIES.text.some(f => f.name === name)) return 'text';
  if (FUNCTION_CATEGORIES.information.some(f => f.name === name)) return 'information';
  if (FUNCTION_CATEGORIES.financial.some(f => f.name === name)) return 'financial';
  if (FUNCTION_CATEGORIES.matrix.some(f => f.name === name)) return 'matrix';
  
  return 'other';
};

// エクスポート
export * from './types';
export * from './utils';
export * from './dateFunctions';
export * from './mathFunctions';
export * from './lookupFunctions';
export * from './logicFunctions';
export * from './textFunctions';
export * from './statisticsFunctions';
export * from './informationFunctions';
export * from './financialFunctions';
export * from './matrixFunctions';